/*
 * generated by Xtext 2.12.0
 */
package fr.uha.ensisa.project.pan_chabalier.tse.serializer;

import com.google.inject.Inject;
import fr.uha.ensisa.project.pan_chabalier.tse.services.TSEGrammarAccess;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.Element;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.EndTransition;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.Model;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.State;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.StatesProperties;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.TSEPackage;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.Transition;
import fr.uha.ensisa.project.pan_chabalier.tse.tSE.transitionProperties;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class TSESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TSEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TSEPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TSEPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case TSEPackage.END_TRANSITION:
				sequence_EndTransition(context, (EndTransition) semanticObject); 
				return; 
			case TSEPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TSEPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case TSEPackage.STATES_PROPERTIES:
				sequence_StatesProperties(context, (StatesProperties) semanticObject); 
				return; 
			case TSEPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case TSEPackage.TRANSITION_PROPERTIES:
				sequence_transitionProperties(context, (transitionProperties) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (states+=State | transitions+=Transition)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EndTransition returns EndTransition
	 *
	 * Constraint:
	 *     (end+=ID | end+='reflexive')
	 */
	protected void sequence_EndTransition(ISerializationContext context, EndTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name+=ID statesPropriety+=StatesProperties*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatesProperties returns StatesProperties
	 *
	 * Constraint:
	 *     (color+=COLOR | thickness+=FLOAT | position+=ID | position+=ID)
	 */
	protected void sequence_StatesProperties(ISerializationContext context, StatesProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     ((start+=ID end+=EndTransition proprietyStates+=transitionProperties* label=Label?) | init+=ID)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     transitionProperties returns transitionProperties
	 *
	 * Constraint:
	 *     (color+=COLOR | thickness+=FLOAT | curve+=FLOAT | position+=ID)
	 */
	protected void sequence_transitionProperties(ISerializationContext context, transitionProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
