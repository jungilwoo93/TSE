/*
 * generated by Xtext 2.12.0
 */
package fr.uha.ensisa.project.pan_chabalier.generator

import fr.uha.ensisa.project.pan_chabalier.tSE.Element
import fr.uha.ensisa.project.pan_chabalier.tSE.Model
import fr.uha.ensisa.project.pan_chabalier.tSE.StatesProperties
import fr.uha.ensisa.project.pan_chabalier.tSE.TransitionProperties
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TSEGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (m : resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile("fr/uha/ensisa/project/pan_chabalier/tmp/GeneratedData.java", m.compile());
		}

	}

	def compile(Model model) '''
package fr.uha.ensisa.project.pan_chabalier.tmp;

import java.awt.Color;
import java.awt.Point;
import fr.uha.ensisa.projet.pan_chabalier.core.ElementFactoryImp;
import fr.uha.ensisa.projet.pan_chabalier.controller.GeneratedDataInterface;


public class GeneratedData implements GeneratedDataInterface {

	private ElementFactoryImp factory;
	
	public GeneratedData(ElementFactoryImp factory){
		this.factory = factory;
	}
	
	@Override
	public void instanciateElements(){
		«FOR e : model.elements»
			«e.compile»
		«ENDFOR»
	}
	
	@Override
	public void setFactory(ElementFactoryImp f){
		this.factory = f;
	}
}
	'''

	def compile(Element e) '''
		«IF e.state !== null»
			factory.createState("«e.state.name»"«FOR p:e.state.statesProperties»«p.compile»«ENDFOR»);
		«ENDIF»
		
		«IF e.transition !== null»
			factory.createTransition("«IF e.transition.start.stateTransition !==null»«e.transition.start.stateTransition»«ENDIF»", "«IF e.transition.end.stateTransition !==null»«e.transition.end.stateTransition»«ENDIF»"«FOR p:e.transition.transitionProperties»«p.compile»«ENDFOR», "«IF e.transition.label.text!==null»«e.transition.label.text»«ENDIF»«IF e.transition.label.text===null»""«ENDIF»", «IF e.transition.label.position!==null»new Point(«e.transition.label.position»)«ENDIF»«IF e.transition.label.position===null»new Point(null)«ENDIF»);
		«ENDIF»
	'''

	def compile(
		TransitionProperties p) ''', «IF p.color !== null»Color.«p.color»«ENDIF»«IF p.color === null»null«ENDIF», «IF p.thickness!==null»new Float(«p.thickness»)«ENDIF»«IF p.thickness===null»new Float(null)«ENDIF», «IF p.curve!==null»new Float(«p.curve»)«ENDIF»«IF p.curve===null»new Float(null)«ENDIF»'''

	def compile(
		StatesProperties p) ''', «IF p.position!==null»new Point(«p.position»)«ENDIF»«IF p.position===null»new Point(null)«ENDIF», «IF p.color !== null»Color.«p.color»«ENDIF»«IF p.color === null»null«ENDIF», «IF p.thickness!==null»new Float(«p.thickness»)«ENDIF»«IF p.thickness===null»new Float(null)«ENDIF»'''

}

