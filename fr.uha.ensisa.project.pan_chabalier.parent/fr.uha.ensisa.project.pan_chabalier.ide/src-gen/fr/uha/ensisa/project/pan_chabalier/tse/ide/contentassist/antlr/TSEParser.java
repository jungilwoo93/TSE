/*
 * generated by Xtext 2.12.0
 */
package fr.uha.ensisa.project.pan_chabalier.tse.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.uha.ensisa.project.pan_chabalier.tse.ide.contentassist.antlr.internal.InternalTSEParser;
import fr.uha.ensisa.project.pan_chabalier.tse.services.TSEGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TSEParser extends AbstractContentAssistParser {

	@Inject
	private TSEGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTSEParser createParser() {
		InternalTSEParser result = new InternalTSEParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getStatesPropertiesAccess().getAlternatives(), "rule__StatesProperties__Alternatives");
					put(grammarAccess.getTransitionAccess().getAlternatives(), "rule__Transition__Alternatives");
					put(grammarAccess.getTransitionPropertiesAccess().getAlternatives(), "rule__TransitionProperties__Alternatives");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStatesPropertiesAccess().getGroup_0(), "rule__StatesProperties__Group_0__0");
					put(grammarAccess.getStatesPropertiesAccess().getGroup_1(), "rule__StatesProperties__Group_1__0");
					put(grammarAccess.getStatesPropertiesAccess().getGroup_2(), "rule__StatesProperties__Group_2__0");
					put(grammarAccess.getStatesPropertiesAccess().getGroup_3(), "rule__StatesProperties__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup_0(), "rule__Transition__Group_0__0");
					put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getTransitionPropertiesAccess().getGroup_0(), "rule__TransitionProperties__Group_0__0");
					put(grammarAccess.getTransitionPropertiesAccess().getGroup_1(), "rule__TransitionProperties__Group_1__0");
					put(grammarAccess.getTransitionPropertiesAccess().getGroup_2(), "rule__TransitionProperties__Group_2__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getElementAccess().getStateAssignment_0(), "rule__Element__StateAssignment_0");
					put(grammarAccess.getElementAccess().getTransitionAssignment_1(), "rule__Element__TransitionAssignment_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getStatesPropertiesAssignment_2(), "rule__State__StatesPropertiesAssignment_2");
					put(grammarAccess.getStatesPropertiesAccess().getColorAssignment_0_1(), "rule__StatesProperties__ColorAssignment_0_1");
					put(grammarAccess.getStatesPropertiesAccess().getThicknessAssignment_1_1(), "rule__StatesProperties__ThicknessAssignment_1_1");
					put(grammarAccess.getStatesPropertiesAccess().getPositionAssignment_2_1(), "rule__StatesProperties__PositionAssignment_2_1");
					put(grammarAccess.getStatesPropertiesAccess().getPositionAssignment_3_1(), "rule__StatesProperties__PositionAssignment_3_1");
					put(grammarAccess.getTransitionAccess().getStartAssignment_0_1(), "rule__Transition__StartAssignment_0_1");
					put(grammarAccess.getTransitionAccess().getEndAssignment_0_3(), "rule__Transition__EndAssignment_0_3");
					put(grammarAccess.getTransitionAccess().getTransitionPropertiesAssignment_0_4(), "rule__Transition__TransitionPropertiesAssignment_0_4");
					put(grammarAccess.getTransitionAccess().getLabelAssignment_0_5(), "rule__Transition__LabelAssignment_0_5");
					put(grammarAccess.getTransitionAccess().getInitAssignment_1_1(), "rule__Transition__InitAssignment_1_1");
					put(grammarAccess.getLabelAccess().getTextAssignment_1(), "rule__Label__TextAssignment_1");
					put(grammarAccess.getLabelAccess().getPositionAssignment_2(), "rule__Label__PositionAssignment_2");
					put(grammarAccess.getCoordinatesStatesTransitionAccess().getStateTransitionAssignment(), "rule__CoordinatesStatesTransition__StateTransitionAssignment");
					put(grammarAccess.getTransitionPropertiesAccess().getColorAssignment_0_1(), "rule__TransitionProperties__ColorAssignment_0_1");
					put(grammarAccess.getTransitionPropertiesAccess().getThicknessAssignment_1_1(), "rule__TransitionProperties__ThicknessAssignment_1_1");
					put(grammarAccess.getTransitionPropertiesAccess().getCurveAssignment_2_1(), "rule__TransitionProperties__CurveAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TSEGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TSEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
